{"version":3,"sources":["components/item-info/item-info.tsx","services/pokemon-services.ts","components/listItem/index.ts","components/listItem/list-item.tsx","components/list/index.ts","components/list/list.tsx","components/item-info/index.ts","components/find-input/index.ts","components/find-input/find-input.tsx","components/app/index.ts","components/app/app.tsx","reducers/index.ts","store.ts","index.tsx"],"names":["typeStat","PokemonServices","url","getResult","category","params","a","fetch","res","ok","Error","status","json","getList","offset","limit","body","results","getPokemon","id","getPokemonSpecies","ListItem","item","dispatch","useDispatch","tabIndex","index","className","onClick","type","payload","showPokemon","src","alt","name","List","ps","useRef","useState","pokList","setPokList","page","setPage","hasMore","setHasMore","searchText","useSelector","state","useEffect","current","then","map","catch","console","log","checkSearch","pok","isNaN","parseInt","includes","pageStart","loadMore","filter","length","prev","slice","ProgressBar","count","idName","style","width","LoadingPage","ErrorPage","BodyPage","pokemon","setLoading","e","stopPropagation","types","base_experience","height","weight","stats","base_stat","species","ItemInfo","setPokemon","loading","error","setError","loadPokemon","spe","flavor_text_entries","language","version","flavor_text","document","setAttribute","reason","display","FindInput","maxLength","value","onChange","currentTarget","toLowerCase","placeholder","App","initialState","reducer","action","Object","assign","store","createStore","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.72ce882e.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { IRootState } from \"../../reducers\";\r\nimport { pokemonSpeciesType, pokemonType } from \"../../services/pokemon-services\";\r\n\r\nimport \"./style.scss\";\r\n\r\nconst ItemInfo: React.FC = () => {\r\n\r\n    const {ps, index, showPokemon} = useSelector((state:IRootState) => state);\r\n    const [pokemon, setPokemon] = useState<pokemonType>();\r\n    const [loading, setLoading] = useState<boolean>(true);\r\n    const [error, setError] = useState<boolean>(false);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onLoad = () => {\r\n        setLoading(true);\r\n        document.body.setAttribute(\"style\", \"overflow: hidden;\");\r\n\r\n        ps?.getPokemon(index)\r\n        .then ((pok) => {\r\n            ps?.getPokemonSpecies(index).then( (spe) => {\r\n                loadPokemon(pok, spe);\r\n            }).catch( (reason) => {console.log(reason); setError(true);})\r\n        }).catch( (reason) => {console.log(reason); setError(true);})\r\n    }\r\n\r\n    const loadPokemon = (pok:pokemonType, spe: pokemonSpeciesType) => {\r\n\r\n        const species = spe.flavor_text_entries.filter( (item) =>\r\n            ((item.language.name === \"en\") && (item.version.name === \"white\"))\r\n        )[0];\r\n\r\n        pok.species = species.flavor_text || \"Not discription\";\r\n\r\n        setPokemon(pok);\r\n        setLoading(false);\r\n        setError(false);\r\n    }\r\n\r\n    useEffect( () => {\r\n        showPokemon ? onLoad() : document.body.setAttribute(\"style\", \"overflow: auto;\");\r\n    }, [showPokemon]\r\n    );\r\n\r\n    return (\r\n        <div className=\"popup__back\" \r\n        style={{display: showPokemon ? \"\" : \"none\"}}\r\n        onClick={() => {dispatch({type: \"SHOW_SET\", payload: false}); setLoading(true); setError(false)}}\r\n        >\r\n            {\r\n                error ? <ErrorPage/> :\r\n                loading ? <LoadingPage/> : \r\n                            <BodyPage pokemon={pokemon} dispatch={dispatch} setLoading={setLoading}/>\r\n            }       \r\n        </div>\r\n    ) \r\n}\r\n\r\n\r\n//Progress bar///\r\nenum typeStat {\r\n    \"hp\",\r\n    \"atk\",\r\n    \"def\",\r\n    \"s.atk\",\r\n    \"s.def\",\r\n    \"spd\"\r\n}\r\n\r\ntype ProgressBarProps = {\r\n    count: number,\r\n    idName: typeStat,\r\n}\r\n\r\nconst ProgressBar:React.FC<ProgressBarProps> = ({count, idName}) => {\r\n\r\n    return (\r\n        <div className=\"progress-bar\">\r\n            <p className=\"progress-bar__title\">{typeStat[idName] + \":\" + count}</p>\r\n            <div className=\"progress-bar__number\" style={{width: (count/200*100)+\"%\"}}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//Loading page///\r\nconst LoadingPage = () => {\r\n    return (\r\n        <div className=\"popup__panel\">\r\n            <h3>Loading...</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\n//Error page//\r\nconst ErrorPage = () => {\r\n    return (\r\n        <div className=\"popup__panel\">\r\n            <h3>Error!</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\n//Content page//\r\nconst BodyPage:React.FC<{pokemon:pokemonType | undefined, dispatch:any, setLoading: any}> = ({pokemon, dispatch, setLoading}) => {\r\n    return (\r\n    <div className=\"popup\" onClick={(e) => {e.stopPropagation();}}>\r\n        <div className=\"popup__panel\">\r\n            <h3>#{pokemon?.id} {pokemon?.name}</h3>\r\n            <button className=\"popup__panel-close\" onClick={() => {dispatch({type: \"SHOW_SET\", payload: false}); setLoading(true);}}>X</button>\r\n        </div>\r\n        <div className=\"popup__content\">\r\n            <div className=\"popup__main\">\r\n                <div className=\"popup__first-coloum\">\r\n                    <fieldset className=\"popup__img-cover\">\r\n                        <legend>image</legend>\r\n                        <img className=\"popup__img\" \r\n                                src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/dream-world/${pokemon?.id}.svg`} \r\n                                alt=\"Pokemon\"/>\r\n                    </fieldset>\r\n                    <fieldset className=\"popup__types\">\r\n                        <legend>types</legend>\r\n                        {\r\n                            pokemon?.types.map( (item, index) => {\r\n                                return (\r\n                                <span key={index} className={\"types-color-\"+item.type.name}>{item.type.name}</span>\r\n                                )\r\n                            }\r\n                            )\r\n                        }\r\n                    </fieldset>\r\n                </div>\r\n                <div className=\"popup__second-coloum\">\r\n                    <fieldset>\r\n                        <legend>general</legend>\r\n                        <ul className=\"popup__general\">\r\n                            <li>Base exp: {pokemon?.base_experience}</li>\r\n                            <li>Height: {pokemon!.height / 10}m</li>\r\n                            <li>Weight: {pokemon!.weight / 10}kg</li>\r\n                        </ul>\r\n                    </fieldset>\r\n                    <fieldset>\r\n                        <legend>stats</legend>\r\n                        <div className=\"popup__stats\">\r\n                            {\r\n                                pokemon?.stats.map( (state, index) => {\r\n                                    return (\r\n                                        <ProgressBar key={index} count={state.base_stat} idName={index}/>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </fieldset>\r\n                </div>\r\n            </div>\r\n            <fieldset className=\"popup__description\">\r\n                <legend>description</legend>\r\n                {pokemon?.species}\r\n            </fieldset>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default ItemInfo;","export type pokemonTitelType = {\r\n    name: string,\r\n    url: string,\r\n    index: number,\r\n};\r\n\r\nexport type pokemonType = {\r\nid: number,\r\nbase_experience: number,\r\nheight: number,\r\nweight: number,\r\nname: string,\r\nspecies: string,\r\nstats: {\r\n    base_stat: number,\r\n    stat: {\r\n        name: string\r\n    }\r\n}[],\r\ntypes: {\r\n    type: {\r\n        name: string\r\n    }\r\n}[],\r\n}\r\n\r\nexport type pokemonSpeciesType = {\r\n    flavor_text_entries: {\r\n        flavor_text: string,\r\n        language: {\r\n            name: string,\r\n        },\r\n        version: {\r\n            name: string,\r\n        }\r\n    }[]\r\n}\r\n\r\nexport interface psType {\r\n    url: string,\r\n    getResult: (category : string, params : string) => Promise<any>,\r\n    getList: (offset : number, limit: number) => Promise<pokemonTitelType[]>,\r\n    getPokemon: (id : number) => Promise<pokemonType>,\r\n    getPokemonSpecies: (id : number) => Promise<pokemonSpeciesType>,\r\n}\r\n\r\nexport class PokemonServices implements psType {\r\n\r\n    url = 'https://pokeapi.co/api/v2/';\r\n\r\n    getResult = async (category : string, params : string) : Promise<any> => {\r\n\r\n        const res = await fetch(`${this.url}${category}${params}`);\r\n\r\n        if (!res.ok) {\r\n            throw new Error(`Ошибка выполения запроса: ${this.url} \\n статус: ${res.status}`);\r\n        }\r\n\r\n        return await res.json();\r\n    };\r\n\r\n    getList = async (offset : number, limit: number) : Promise<pokemonTitelType[]> => {\r\n        const params = `?offset=${offset}&limit=${limit}`;\r\n\r\n        const body = await this.getResult('pokemon', params);\r\n\r\n        return body.results;\r\n    }\r\n\r\n    getPokemon = async (id : number) : Promise<pokemonType> => {\r\n        const params = `/${id}`;\r\n\r\n        const body = await this.getResult('pokemon', params);\r\n\r\n        return body;\r\n    }\r\n\r\n    getPokemonSpecies = async (id : number) : Promise<pokemonSpeciesType> => {\r\n        const params = `/${id}`;\r\n\r\n        const body = await this.getResult('pokemon-species', params);\r\n\r\n        return body;\r\n    }\r\n\r\n}","import ListItem from \"./list-item\";\r\nexport default ListItem;","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { pokemonTitelType } from \"../../services/pokemon-services\";\r\n\r\nimport './style.scss';\r\n\r\ntype itemTypeProps = {\r\n    item:pokemonTitelType,\r\n}\r\n\r\nconst ListItem: React.FC<itemTypeProps> = ({item}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div tabIndex={item.index} className=\"card\" onClick={() => {dispatch({type: \"ID_SET\", payload: {index: item.index, showPokemon: true}})}}>\r\n            <img src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/dream-world/${item.index}.svg`}\r\n            alt=\"Pokemon\" className=\"card__image\"/>\r\n            <div className=\"card__info\">\r\n                <h2 className=\"card__info-title\">{item.name}</h2>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListItem;","import List from \"./list\";\r\nexport default List;","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { IRootState } from \"../../reducers\";\r\nimport { PokemonServices, pokemonTitelType } from \"../../services/pokemon-services\";\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport ListItem from \"../listItem\";\r\n\r\nimport \"./style.scss\";\r\n\r\nconst List: React.FC = () => {\r\n    const dispatch  = useDispatch()\r\n    const ps = useRef(new PokemonServices());\r\n\r\n    const [pokList, setPokList] = useState<pokemonTitelType[]>([]);\r\n    const [page, setPage] = useState(40);\r\n    const [hasMore, setHasMore] = useState(false);\r\n\r\n    const {searchText} = useSelector( (state:IRootState) => state);\r\n\r\n    useEffect( () => {\r\n        dispatch({type: \"PS_SET\", payload: new PokemonServices()});\r\n\r\n        ps.current.getList(0,649)\r\n        .then((res:pokemonTitelType[]) => {\r\n            res.map((item, index) => item.index = index+1);\r\n            setPokList(res);\r\n            setHasMore(true);\r\n        })\r\n        .catch(() => {console.log(\"Ошибка\")});\r\n\r\n        }, [dispatch]\r\n    );\r\n\r\n    useEffect( () => {setPage(40); setHasMore(true)}, [searchText])\r\n\r\n    const checkSearch = (pok:pokemonTitelType) : boolean => {\r\n\r\n        if (isNaN(parseInt(searchText)))\r\n            return pok.name.includes(searchText);\r\n        else\r\n            return pok.index === parseInt(searchText);\r\n    }\r\n\r\n    const loadFunc = () => {\r\n        console.log(page);\r\n        if (pokList.filter((item) => checkSearch(item)).length <=40 || page >= 649) {setHasMore(false); return};\r\n        setPage(prev => prev+40);\r\n    }\r\n\r\n    return (\r\n        <InfiniteScroll\r\n            className=\"list\"\r\n            pageStart={0}\r\n            loadMore={loadFunc}\r\n            hasMore={hasMore}\r\n        >\r\n            {\r\n                pokList.filter((item) => checkSearch(item))\r\n                .slice(0,page)\r\n                .map( (item, index) => {\r\n                    return (\r\n                        <ListItem key={index} item={item}/>\r\n                    )\r\n                })\r\n            }\r\n        </InfiniteScroll>\r\n    )\r\n}\r\n\r\nexport default List;","import ItemInfo from \"./item-info\";\r\nexport default ItemInfo;","import FindInput from \"./find-input\";\r\nexport default FindInput;","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { IRootState } from '../../reducers';\r\n\r\nconst FindInput : React.FC = () => {\r\n\r\n    const {searchText} = useSelector((state:IRootState) => state);\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const handlerSearch = (e:React.FormEvent<HTMLInputElement>) => {\r\n        dispatch({type: \"SEARCH_SET\", payload: e.currentTarget.value.toLowerCase()});\r\n    }\r\n\r\n    return (\r\n        <input className=\"panel__find-input\" \r\n        maxLength={20} \r\n        value={searchText}\r\n        onChange={handlerSearch}\r\n        placeholder=\"search (name or id)\"\r\n        type=\"text\"/>\r\n    )\r\n}\r\n\r\nexport default FindInput;","import App from \"./app\";\r\nexport default App;","import React from 'react';\r\n\r\nimport \"./bootstrap-grid.min.css\";\r\nimport \"./style.scss\";\r\nimport \"normalize.css\";\r\n\r\nimport List from '../list';\r\nimport ItemInfo from '../item-info';\r\nimport FindInput from '../find-input';\r\n\r\nconst App : React.FC = () => { \r\n\r\n    return (\r\n        <>\r\n            <header>\r\n                <div className=\"panel\">\r\n                    <h1 className=\"panel__title\">Pokemon Lib</h1> \r\n                    <FindInput/>\r\n                </div>\r\n            </header>\r\n            <section className=\"container-fluid\">\r\n                <List />    \r\n                <ItemInfo />\r\n            </section>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;","import { psType } from \"../services/pokemon-services\";\r\n\r\nexport interface IRootState {\r\n    ps: psType | null,\r\n    index: number,\r\n    showPokemon: boolean,\r\n    searchText: string,\r\n}\r\n\r\nconst initialState: IRootState = { \r\n    ps: null,\r\n    index: 0,\r\n    showPokemon: false,\r\n    searchText: \"\",\r\n}\r\n\r\nconst reducer = (state = initialState, action: any) => {\r\n\r\n    switch (action.type) {\r\n        case 'PS_SET':\r\n            return Object.assign({}, state, {ps:action.payload});\r\n        case 'ID_SET':\r\n            return Object.assign({}, state, action.payload);\r\n        case 'SHOW_SET':\r\n            return Object.assign({}, state, {showPokemon: action.payload});\r\n        case 'SEARCH_SET':\r\n            return Object.assign({}, state, {searchText: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import {createStore} from \"redux\";\r\n\r\nimport reducer from \"./reducers\";\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\nimport {Provider} from \"react-redux\";\n\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}